{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useMemo } from \"react\";\n\nconst usePagination = ({\n  totalCount,\n  pageSize,\n  siblingCount = 1,\n  currentPage\n}) => {\n  _s();\n\n  const range = (start, end) => {\n    let length = end - start + 1;\n    return Array.from({\n      length\n    }, (_, idx) => idx + start);\n  };\n\n  var DOTS = '...';\n  const paginationRange = useMemo(() => {\n    const totalPageCount = Math.ceil(totalCount / pageSize);\n    const totalPageNumbers = siblingCount + 5;\n\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount);\n    }\n\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPageCount;\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      let leftItemCount = 3 + 2 * siblingCount;\n      let leftRange = range(1, leftItemCount);\n      return [...leftRange, DOTS, totalPageCount];\n    }\n    /*\n    \tCase 3: No right dots to show, but left dots to be shown\n    */\n\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      let rightItemCount = 3 + 2 * siblingCount;\n      let rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\n      return [firstPageIndex, DOTS, ...rightRange];\n    }\n    /*\n    \tCase 4: Both left and right dots to be shown\n    */\n\n\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n    }\n  }, [totalCount, pageSize, siblingCount, currentPage]);\n  return paginationRange;\n};\n\n_s(usePagination, \"tLviJI6rwkyze3+kNwkFLwjvB48=\");\n\nexport default usePagination;","map":{"version":3,"sources":["/Users/vineetachauhan/workspace/custom-table-with-react/react-redux-crud-ops/src/components/usePagination.js"],"names":["React","useMemo","usePagination","totalCount","pageSize","siblingCount","currentPage","range","start","end","length","Array","from","_","idx","DOTS","paginationRange","totalPageCount","Math","ceil","totalPageNumbers","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","leftRange","rightItemCount","rightRange","middleRange"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,OAAd,QAA4B,OAA5B;;AAEA,MAAMC,aAAa,GAAG,CAAC;AACrBC,EAAAA,UADqB;AAErBC,EAAAA,QAFqB;AAGrBC,EAAAA,YAAY,GAAG,CAHM;AAIrBC,EAAAA;AAJqB,CAAD,KAKhB;AAAA;;AAEJ,QAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC5B,QAAIC,MAAM,GAAGD,GAAG,GAAGD,KAAN,GAAc,CAA3B;AAEA,WAAOG,KAAK,CAACC,IAAN,CAAW;AAAEF,MAAAA;AAAF,KAAX,EAAuB,CAACG,CAAD,EAAIC,GAAJ,KAAYA,GAAG,GAAGN,KAAzC,CAAP;AACD,GAJD;;AAKA,MAAIO,IAAI,GAAC,KAAT;AACA,QAAMC,eAAe,GAAGf,OAAO,CAAC,MAAM;AACpC,UAAMgB,cAAc,GAAGC,IAAI,CAACC,IAAL,CAAUhB,UAAU,GAAGC,QAAvB,CAAvB;AAEA,UAAMgB,gBAAgB,GAAGf,YAAY,GAAG,CAAxC;;AAGA,QAAIe,gBAAgB,IAAIH,cAAxB,EAAwC;AACtC,aAAOV,KAAK,CAAC,CAAD,EAAIU,cAAJ,CAAZ;AACD;;AAGD,UAAMI,gBAAgB,GAAGH,IAAI,CAACI,GAAL,CAAShB,WAAW,GAAGD,YAAvB,EAAqC,CAArC,CAAzB;AACA,UAAMkB,iBAAiB,GAAGL,IAAI,CAACM,GAAL,CACxBlB,WAAW,GAAGD,YADU,EAExBY,cAFwB,CAA1B;AAMA,UAAMQ,kBAAkB,GAAGJ,gBAAgB,GAAG,CAA9C;AACA,UAAMK,mBAAmB,GAAGH,iBAAiB,GAAGN,cAAc,GAAG,CAAjE;AAEA,UAAMU,cAAc,GAAG,CAAvB;AACA,UAAMC,aAAa,GAAGX,cAAtB;;AAGA,QAAI,CAACQ,kBAAD,IAAuBC,mBAA3B,EAAgD;AAC9C,UAAIG,aAAa,GAAG,IAAI,IAAIxB,YAA5B;AACA,UAAIyB,SAAS,GAAGvB,KAAK,CAAC,CAAD,EAAIsB,aAAJ,CAArB;AAGA,aAAO,CAAC,GAAGC,SAAJ,EAAef,IAAf,EAAqBE,cAArB,CAAP;AACD;AAED;AACJ;AACA;;;AACI,QAAIQ,kBAAkB,IAAI,CAACC,mBAA3B,EAAgD;AAC9C,UAAIK,cAAc,GAAG,IAAI,IAAI1B,YAA7B;AACA,UAAI2B,UAAU,GAAGzB,KAAK,CACpBU,cAAc,GAAGc,cAAjB,GAAkC,CADd,EAEpBd,cAFoB,CAAtB;AAIA,aAAO,CAACU,cAAD,EAAiBZ,IAAjB,EAAuB,GAAGiB,UAA1B,CAAP;AACD;AAED;AACJ;AACA;;;AACI,QAAIP,kBAAkB,IAAIC,mBAA1B,EAA+C;AAC7C,UAAIO,WAAW,GAAG1B,KAAK,CAACc,gBAAD,EAAmBE,iBAAnB,CAAvB;AACA,aAAO,CAACI,cAAD,EAAiBZ,IAAjB,EAAuB,GAAGkB,WAA1B,EAAuClB,IAAvC,EAA6Ca,aAA7C,CAAP;AACD;AACF,GApD8B,EAoD5B,CAACzB,UAAD,EAAaC,QAAb,EAAuBC,YAAvB,EAAqCC,WAArC,CApD4B,CAA/B;AAsDA,SAAOU,eAAP;AAGD,CAtED;;GAAMd,a;;AAuEN,eAAgBA,aAAhB","sourcesContent":["import React,{useMemo} from \"react\";\n\nconst usePagination = ({\n  totalCount,\n  pageSize,\n  siblingCount = 1,\n  currentPage\n}) => {\n\n  const range = (start, end) => {\n    let length = end - start + 1;\n    \n    return Array.from({ length }, (_, idx) => idx + start);\n  };\n  var DOTS='...';\n  const paginationRange = useMemo(() => {\n    const totalPageCount = Math.ceil(totalCount / pageSize);\n\n    const totalPageNumbers = siblingCount + 5;\n\n    \n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount);\n    }\n\t\n    \n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(\n      currentPage + siblingCount,\n      totalPageCount\n    );\n\n    \n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPageCount;\n\n    \n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      let leftItemCount = 3 + 2 * siblingCount;\n      let leftRange = range(1, leftItemCount);\n      \n\n      return [...leftRange, DOTS, totalPageCount];\n    }\n\n    /*\n    \tCase 3: No right dots to show, but left dots to be shown\n    */\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      let rightItemCount = 3 + 2 * siblingCount;\n      let rightRange = range(\n        totalPageCount - rightItemCount + 1,\n        totalPageCount\n      );\n      return [firstPageIndex, DOTS, ...rightRange];\n    }\n     \n    /*\n    \tCase 4: Both left and right dots to be shown\n    */\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n    }\n  }, [totalCount, pageSize, siblingCount, currentPage]);\n\n  return paginationRange;\n\n  \n};\nexport  default usePagination;"]},"metadata":{},"sourceType":"module"}